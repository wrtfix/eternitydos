// Class automatically generated by Dev-C++ New Class wizard

#ifndef JUEGO_H
#define JUEGO_H

// No description
class Juego
{
	private:
        int N;
        int cantColores;
        
        /* Verifica si una ficha entra en una posición del tablero en un determinado
         * estado del estado del mismo.
         */
        bool entraFicha(Tablero *t,Ficha *hijo,int fila,int columna)
        {
            int arriba; //lo que hay arriba de HIJO
            int derecha; //lo que hay a la derecha de HIJO
            int abajo; //idem
            int izquierda; //idem
            
            bool compArriba, compAbajo, compIzquierda, compDerecha;
            
			//que neceisto tener ARRIBA para ser compatible?
            if (fila == 0)
                arriba = 0;
            else
                arriba = (t->get(fila-1,columna))->getAbajo();
			compArriba = (hijo->getArriba() == arriba);
            
			//que neceisto tener a IZQUIERDA para ser compatible?
            if (columna == 0)
                izquierda = 0;
            else
                izquierda = (t->get(fila,columna-1))->getDerecha();
			compIzquierda = (hijo->getIzquierda() == izquierda);

			//que neceisto tener ABAJO para ser compatible?
            if (fila == N-1)
            {
                abajo = 0;
                compAbajo = (hijo->getAbajo() == abajo);
            }
            else
				//mientras que no sea un 0, ABAJO puedo tener cualquier cosa
				compAbajo = (hijo->getAbajo() != 0);

			//que neceisto tener a DERECHA para ser compatible?
            if (columna == N-1)
            {
                derecha = 0;
                compDerecha = (hijo->getDerecha() == derecha);
            }
            else
				//mientras que no sea un 0, a la DERECHA puedo tener cualquier cosa
				compDerecha = (hijo->getDerecha() != 0);
            
            return !(compArriba && compDerecha && compAbajo && compIzquierda);
        
        }

        //Verifica si el tablero está en estado solucion.
	    bool solucion(Tablero *t)
	    {
            int i=0;
            int j;
            bool ningunNull = true;
            while ((i<N) && (ningunNull))
            {
                j=0;
                while ((j<N) && (ningunNull))
                {
                    if (t->get(i,j) == NULL)
                        ningunNull = false;
                    j++;
                }
                i++;
            }
            return ningunNull;
        }
  
	    //ALGORITMO PRINCIPAL DEL SISTEMA
	    //BACKTRACKING PARA ENCONTRAR UNA SOLUCION.
        void back(Tablero *t,Ficha *fichas[],int fila, int columna, bool visitado[],bool* encontrado)
        {
            if (solucion(t))
			{
                *encontrado = true;
            }
            else
	        {
                for (int nroFicha = 0 ; nroFicha<N*N ; nroFicha++)
                    for (int rotaciones = 0;rotaciones<4 && !visitado[nroFicha];rotaciones++)
                    {
                        if (!entraFicha(t,fichas[nroFicha],fila,columna))
                        {
    					   t->set(fichas[nroFicha],fila,columna);
    					   t->get(fila,columna)->setX(fila+1);
    					   t->get(fila,columna)->setY(columna+1);
    					   visitado[nroFicha] = true;
	                       if ((columna == N-1) && (fila < N-1))
    	                    	back(t,fichas,fila+1,0,visitado,encontrado);
    	                    else
    	                       	if (columna < N-1)
    								back(t,fichas,fila,columna+1,visitado,encontrado);
    							else
    								//solo en la ultima... ubiqué todas las fichas!
    								back(t,fichas,fila,columna,visitado,encontrado);

    					    if (!*encontrado)
                        	{	
                                visitado[nroFicha]=false;
    	                       	t->set(NULL,fila,columna);
                            }
                        }
                        if (!*encontrado)
    	                    fichas[nroFicha]->Rotar();
                    }
        }
    }
 
    public:
		Juego(int p,int c)
        {    
            N = p;
            cantColores = c;
        }
        
		//Resuelve un puzzle a partir de un tablero y un arreglo con las fichas.
		void resolverPuzzle(Tablero* t,Ficha* f[])
		{
            bool visitado[N*N];
            for (int i=0;i<N*N;i++)
                visitado[i] = false;
            bool encontrado = false;
            //int contador;
            //int nivel = (N*N*3)+1;
            this->back(t,f,0,0,visitado,&encontrado);
        }
		
		~Juego(){}
};

#endif // JUEGO_H
